# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_catalog_pb2 as data__catalog__pb2


class DataCatalogAPIServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createDataProduct = channel.unary_unary(
                '/DataCatalogAPIService/createDataProduct',
                request_serializer=data__catalog__pb2.DataProductCreateRequest.SerializeToString,
                response_deserializer=data__catalog__pb2.DataProductCreateResponse.FromString,
                )
        self.updateDataProduct = channel.unary_unary(
                '/DataCatalogAPIService/updateDataProduct',
                request_serializer=data__catalog__pb2.DataProductUpdateRequest.SerializeToString,
                response_deserializer=data__catalog__pb2.DataProductUpdateResponse.FromString,
                )
        self.getDataProduct = channel.unary_unary(
                '/DataCatalogAPIService/getDataProduct',
                request_serializer=data__catalog__pb2.DataProductGetRequest.SerializeToString,
                response_deserializer=data__catalog__pb2.DataProductGetResponse.FromString,
                )
        self.deleteDataProduct = channel.unary_unary(
                '/DataCatalogAPIService/deleteDataProduct',
                request_serializer=data__catalog__pb2.DataProductDeleteRequest.SerializeToString,
                response_deserializer=data__catalog__pb2.DataProductDeleteResponse.FromString,
                )


class DataCatalogAPIServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createDataProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateDataProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDataProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteDataProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataCatalogAPIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createDataProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.createDataProduct,
                    request_deserializer=data__catalog__pb2.DataProductCreateRequest.FromString,
                    response_serializer=data__catalog__pb2.DataProductCreateResponse.SerializeToString,
            ),
            'updateDataProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.updateDataProduct,
                    request_deserializer=data__catalog__pb2.DataProductUpdateRequest.FromString,
                    response_serializer=data__catalog__pb2.DataProductUpdateResponse.SerializeToString,
            ),
            'getDataProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.getDataProduct,
                    request_deserializer=data__catalog__pb2.DataProductGetRequest.FromString,
                    response_serializer=data__catalog__pb2.DataProductGetResponse.SerializeToString,
            ),
            'deleteDataProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteDataProduct,
                    request_deserializer=data__catalog__pb2.DataProductDeleteRequest.FromString,
                    response_serializer=data__catalog__pb2.DataProductDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataCatalogAPIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataCatalogAPIService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createDataProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataCatalogAPIService/createDataProduct',
            data__catalog__pb2.DataProductCreateRequest.SerializeToString,
            data__catalog__pb2.DataProductCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateDataProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataCatalogAPIService/updateDataProduct',
            data__catalog__pb2.DataProductUpdateRequest.SerializeToString,
            data__catalog__pb2.DataProductUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDataProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataCatalogAPIService/getDataProduct',
            data__catalog__pb2.DataProductGetRequest.SerializeToString,
            data__catalog__pb2.DataProductGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteDataProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataCatalogAPIService/deleteDataProduct',
            data__catalog__pb2.DataProductDeleteRequest.SerializeToString,
            data__catalog__pb2.DataProductDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
